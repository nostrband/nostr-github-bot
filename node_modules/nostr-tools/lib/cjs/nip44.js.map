{
  "version": 3,
  "sources": ["../../nip44.ts", "../../utils.ts"],
  "sourcesContent": ["import { chacha20 } from '@noble/ciphers/chacha'\nimport { ensureBytes, equalBytes } from '@noble/ciphers/utils'\nimport { secp256k1 } from '@noble/curves/secp256k1'\nimport { hkdf } from '@noble/hashes/hkdf'\nimport { hmac } from '@noble/hashes/hmac'\nimport { sha256 } from '@noble/hashes/sha256'\nimport { concatBytes, randomBytes } from '@noble/hashes/utils'\nimport { base64 } from '@scure/base'\nimport { utf8Decoder, utf8Encoder } from './utils.ts'\n\nexport const utils = {\n  v2: {\n    maxPlaintextSize: 65536 - 128, // 64kb - 128\n    minCiphertextSize: 100, // should be 128 if min padded to 32b: base64(1+32+32+32)\n    maxCiphertextSize: 102400, // 100kb\n\n    getConversationKey(privkeyA: string, pubkeyB: string): Uint8Array {\n      const key = secp256k1.getSharedSecret(privkeyA, '02' + pubkeyB)\n      return key.subarray(1, 33)\n    },\n\n    getMessageKeys(conversationKey: Uint8Array, salt: Uint8Array) {\n      const keys = hkdf(sha256, conversationKey, salt, 'nip44-v2', 76)\n      return {\n        encryption: keys.subarray(0, 32),\n        nonce: keys.subarray(32, 44),\n        auth: keys.subarray(44, 76),\n      }\n    },\n\n    calcPadding(len: number): number {\n      if (!Number.isSafeInteger(len) || len < 0) throw new Error('expected positive integer')\n      if (len <= 32) return 32\n      const nextpower = 1 << (Math.floor(Math.log2(len - 1)) + 1)\n      const chunk = nextpower <= 256 ? 32 : nextpower / 8\n      return chunk * (Math.floor((len - 1) / chunk) + 1)\n    },\n\n    pad(unpadded: string): Uint8Array {\n      const unpaddedB = utf8Encoder.encode(unpadded)\n      const len = unpaddedB.length\n      if (len < 1 || len >= utils.v2.maxPlaintextSize) throw new Error('invalid plaintext length: must be between 1b and 64KB')\n      const paddedLen = utils.v2.calcPadding(len)\n      const zeros = new Uint8Array(paddedLen - len)\n      const lenBuf = new Uint8Array(2)\n      new DataView(lenBuf.buffer).setUint16(0, len)\n      return concatBytes(lenBuf, unpaddedB, zeros)\n    },\n\n    unpad(padded: Uint8Array): string {\n      const unpaddedLen = new DataView(padded.buffer).getUint16(0)\n      const unpadded = padded.subarray(2, 2 + unpaddedLen)\n      if (\n        unpaddedLen === 0 ||\n        unpadded.length !== unpaddedLen ||\n        padded.length !== 2 + utils.v2.calcPadding(unpaddedLen)\n      )\n        throw new Error('invalid padding')\n      return utf8Decoder.decode(unpadded)\n    },\n  },\n}\n\nexport function encrypt(\n  key: Uint8Array,\n  plaintext: string,\n  options: { salt?: Uint8Array; version?: number } = {},\n): string {\n  const version = options.version ?? 2\n  if (version !== 2) throw new Error('unknown encryption version ' + version)\n  const salt = options.salt ?? randomBytes(32)\n  ensureBytes(salt, 32)\n  const keys = utils.v2.getMessageKeys(key, salt)\n  const padded = utils.v2.pad(plaintext)\n  const ciphertext = chacha20(keys.encryption, keys.nonce, padded)\n  const mac = hmac(sha256, keys.auth, ciphertext)\n  return base64.encode(concatBytes(new Uint8Array([version]), salt, ciphertext, mac))\n}\n\nexport function decrypt(key: Uint8Array, ciphertext: string): string {\n  const u = utils.v2\n  ensureBytes(key, 32)\n\n  const clen = ciphertext.length\n  if (clen < u.minCiphertextSize || clen >= u.maxCiphertextSize) throw new Error('invalid ciphertext length: ' + clen)\n\n  if (ciphertext[0] === '#') throw new Error('unknown encryption version')\n  let data: Uint8Array\n  try {\n    data = base64.decode(ciphertext)\n  } catch (error) {\n    throw new Error('invalid base64: ' + (error as any).message)\n  }\n  const vers = data.subarray(0, 1)[0]\n  if (vers !== 2) throw new Error('unknown encryption version ' + vers)\n\n  const salt = data.subarray(1, 33)\n  const ciphertext_ = data.subarray(33, -32)\n  const mac = data.subarray(-32)\n\n  const keys = u.getMessageKeys(key, salt)\n  const calculatedMac = hmac(sha256, keys.auth, ciphertext_)\n  if (!equalBytes(calculatedMac, mac)) throw new Error('invalid MAC')\n\n  const padded = chacha20(keys.encryption, keys.nonce, ciphertext_)\n  return u.unpad(padded)\n}\n", "import type { Event } from './event.ts'\n\nexport const utf8Decoder = new TextDecoder('utf-8')\nexport const utf8Encoder = new TextEncoder()\n\nexport function normalizeURL(url: string): string {\n  let p = new URL(url)\n  p.pathname = p.pathname.replace(/\\/+/g, '/')\n  if (p.pathname.endsWith('/')) p.pathname = p.pathname.slice(0, -1)\n  if ((p.port === '80' && p.protocol === 'ws:') || (p.port === '443' && p.protocol === 'wss:')) p.port = ''\n  p.searchParams.sort()\n  p.hash = ''\n  return p.toString()\n}\n\n//\n// fast insert-into-sorted-array functions adapted from https://github.com/terrymorse58/fast-sorted-array\n//\nexport function insertEventIntoDescendingList(sortedArray: Event<number>[], event: Event<number>) {\n  let start = 0\n  let end = sortedArray.length - 1\n  let midPoint\n  let position = start\n\n  if (end < 0) {\n    position = 0\n  } else if (event.created_at < sortedArray[end].created_at) {\n    position = end + 1\n  } else if (event.created_at >= sortedArray[start].created_at) {\n    position = start\n  } else\n    while (true) {\n      if (end <= start + 1) {\n        position = end\n        break\n      }\n      midPoint = Math.floor(start + (end - start) / 2)\n      if (sortedArray[midPoint].created_at > event.created_at) {\n        start = midPoint\n      } else if (sortedArray[midPoint].created_at < event.created_at) {\n        end = midPoint\n      } else {\n        // aMidPoint === num\n        position = midPoint\n        break\n      }\n    }\n\n  // insert when num is NOT already in (no duplicates)\n  if (sortedArray[position]?.id !== event.id) {\n    return [...sortedArray.slice(0, position), event, ...sortedArray.slice(position)]\n  }\n\n  return sortedArray\n}\n\nexport function insertEventIntoAscendingList(sortedArray: Event<number>[], event: Event<number>) {\n  let start = 0\n  let end = sortedArray.length - 1\n  let midPoint\n  let position = start\n\n  if (end < 0) {\n    position = 0\n  } else if (event.created_at > sortedArray[end].created_at) {\n    position = end + 1\n  } else if (event.created_at <= sortedArray[start].created_at) {\n    position = start\n  } else\n    while (true) {\n      if (end <= start + 1) {\n        position = end\n        break\n      }\n      midPoint = Math.floor(start + (end - start) / 2)\n      if (sortedArray[midPoint].created_at < event.created_at) {\n        start = midPoint\n      } else if (sortedArray[midPoint].created_at > event.created_at) {\n        end = midPoint\n      } else {\n        // aMidPoint === num\n        position = midPoint\n        break\n      }\n    }\n\n  // insert when num is NOT already in (no duplicates)\n  if (sortedArray[position]?.id !== event.id) {\n    return [...sortedArray.slice(0, position), event, ...sortedArray.slice(position)]\n  }\n\n  return sortedArray\n}\n\nexport class MessageNode {\n  private _value: string\n  private _next: MessageNode | null\n\n  public get value(): string {\n    return this._value\n  }\n  public set value(message: string) {\n    this._value = message\n  }\n  public get next(): MessageNode | null {\n    return this._next\n  }\n  public set next(node: MessageNode | null) {\n    this._next = node\n  }\n\n  constructor(message: string) {\n    this._value = message\n    this._next = null\n  }\n}\n\nexport class MessageQueue {\n  private _first: MessageNode | null\n  private _last: MessageNode | null\n\n  public get first(): MessageNode | null {\n    return this._first\n  }\n  public set first(messageNode: MessageNode | null) {\n    this._first = messageNode\n  }\n  public get last(): MessageNode | null {\n    return this._last\n  }\n  public set last(messageNode: MessageNode | null) {\n    this._last = messageNode\n  }\n  private _size: number\n  public get size(): number {\n    return this._size\n  }\n  public set size(v: number) {\n    this._size = v\n  }\n\n  constructor() {\n    this._first = null\n    this._last = null\n    this._size = 0\n  }\n  enqueue(message: string): boolean {\n    const newNode = new MessageNode(message)\n    if (this._size === 0 || !this._last) {\n      this._first = newNode\n      this._last = newNode\n    } else {\n      this._last.next = newNode\n      this._last = newNode\n    }\n    this._size++\n    return true\n  }\n  dequeue(): string | null {\n    if (this._size === 0 || !this._first) return null\n\n    let prev = this._first\n    this._first = prev.next\n    prev.next = null\n\n    this._size--\n    return prev.value\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAyB;AACzB,mBAAwC;AACxC,uBAA0B;AAC1B,kBAAqB;AACrB,kBAAqB;AACrB,oBAAuB;AACvB,IAAAA,gBAAyC;AACzC,kBAAuB;;;ACLhB,IAAM,cAAc,IAAI,YAAY,OAAO;AAC3C,IAAM,cAAc,IAAI,YAAY;;;ADOpC,IAAM,QAAQ;AAAA,EACnB,IAAI;AAAA,IACF,kBAAkB,QAAQ;AAAA,IAC1B,mBAAmB;AAAA,IACnB,mBAAmB;AAAA,IAEnB,mBAAmB,UAAkB,SAA6B;AAChE,YAAM,MAAM,2BAAU,gBAAgB,UAAU,OAAO,OAAO;AAC9D,aAAO,IAAI,SAAS,GAAG,EAAE;AAAA,IAC3B;AAAA,IAEA,eAAe,iBAA6B,MAAkB;AAC5D,YAAM,WAAO,kBAAK,sBAAQ,iBAAiB,MAAM,YAAY,EAAE;AAC/D,aAAO;AAAA,QACL,YAAY,KAAK,SAAS,GAAG,EAAE;AAAA,QAC/B,OAAO,KAAK,SAAS,IAAI,EAAE;AAAA,QAC3B,MAAM,KAAK,SAAS,IAAI,EAAE;AAAA,MAC5B;AAAA,IACF;AAAA,IAEA,YAAY,KAAqB;AAC/B,UAAI,CAAC,OAAO,cAAc,GAAG,KAAK,MAAM;AAAG,cAAM,IAAI,MAAM,2BAA2B;AACtF,UAAI,OAAO;AAAI,eAAO;AACtB,YAAM,YAAY,KAAM,KAAK,MAAM,KAAK,KAAK,MAAM,CAAC,CAAC,IAAI;AACzD,YAAM,QAAQ,aAAa,MAAM,KAAK,YAAY;AAClD,aAAO,SAAS,KAAK,OAAO,MAAM,KAAK,KAAK,IAAI;AAAA,IAClD;AAAA,IAEA,IAAI,UAA8B;AAChC,YAAM,YAAY,YAAY,OAAO,QAAQ;AAC7C,YAAM,MAAM,UAAU;AACtB,UAAI,MAAM,KAAK,OAAO,MAAM,GAAG;AAAkB,cAAM,IAAI,MAAM,uDAAuD;AACxH,YAAM,YAAY,MAAM,GAAG,YAAY,GAAG;AAC1C,YAAM,QAAQ,IAAI,WAAW,YAAY,GAAG;AAC5C,YAAM,SAAS,IAAI,WAAW,CAAC;AAC/B,UAAI,SAAS,OAAO,MAAM,EAAE,UAAU,GAAG,GAAG;AAC5C,iBAAO,2BAAY,QAAQ,WAAW,KAAK;AAAA,IAC7C;AAAA,IAEA,MAAM,QAA4B;AAChC,YAAM,cAAc,IAAI,SAAS,OAAO,MAAM,EAAE,UAAU,CAAC;AAC3D,YAAM,WAAW,OAAO,SAAS,GAAG,IAAI,WAAW;AACnD,UACE,gBAAgB,KAChB,SAAS,WAAW,eACpB,OAAO,WAAW,IAAI,MAAM,GAAG,YAAY,WAAW;AAEtD,cAAM,IAAI,MAAM,iBAAiB;AACnC,aAAO,YAAY,OAAO,QAAQ;AAAA,IACpC;AAAA,EACF;AACF;AAEO,SAAS,QACd,KACA,WACA,UAAmD,CAAC,GAC5C;AACR,QAAM,UAAU,QAAQ,WAAW;AACnC,MAAI,YAAY;AAAG,UAAM,IAAI,MAAM,gCAAgC,OAAO;AAC1E,QAAM,OAAO,QAAQ,YAAQ,2BAAY,EAAE;AAC3C,gCAAY,MAAM,EAAE;AACpB,QAAM,OAAO,MAAM,GAAG,eAAe,KAAK,IAAI;AAC9C,QAAM,SAAS,MAAM,GAAG,IAAI,SAAS;AACrC,QAAM,iBAAa,wBAAS,KAAK,YAAY,KAAK,OAAO,MAAM;AAC/D,QAAM,UAAM,kBAAK,sBAAQ,KAAK,MAAM,UAAU;AAC9C,SAAO,mBAAO,WAAO,2BAAY,IAAI,WAAW,CAAC,OAAO,CAAC,GAAG,MAAM,YAAY,GAAG,CAAC;AACpF;AAEO,SAAS,QAAQ,KAAiB,YAA4B;AACnE,QAAM,IAAI,MAAM;AAChB,gCAAY,KAAK,EAAE;AAEnB,QAAM,OAAO,WAAW;AACxB,MAAI,OAAO,EAAE,qBAAqB,QAAQ,EAAE;AAAmB,UAAM,IAAI,MAAM,gCAAgC,IAAI;AAEnH,MAAI,WAAW,OAAO;AAAK,UAAM,IAAI,MAAM,4BAA4B;AACvE,MAAI;AACJ,MAAI;AACF,WAAO,mBAAO,OAAO,UAAU;AAAA,EACjC,SAAS,OAAP;AACA,UAAM,IAAI,MAAM,qBAAsB,MAAc,OAAO;AAAA,EAC7D;AACA,QAAM,OAAO,KAAK,SAAS,GAAG,CAAC,EAAE;AACjC,MAAI,SAAS;AAAG,UAAM,IAAI,MAAM,gCAAgC,IAAI;AAEpE,QAAM,OAAO,KAAK,SAAS,GAAG,EAAE;AAChC,QAAM,cAAc,KAAK,SAAS,IAAI,GAAG;AACzC,QAAM,MAAM,KAAK,SAAS,GAAG;AAE7B,QAAM,OAAO,EAAE,eAAe,KAAK,IAAI;AACvC,QAAM,oBAAgB,kBAAK,sBAAQ,KAAK,MAAM,WAAW;AACzD,MAAI,KAAC,yBAAW,eAAe,GAAG;AAAG,UAAM,IAAI,MAAM,aAAa;AAElE,QAAM,aAAS,wBAAS,KAAK,YAAY,KAAK,OAAO,WAAW;AAChE,SAAO,EAAE,MAAM,MAAM;AACvB;",
  "names": ["import_utils"]
}
